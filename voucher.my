from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
import uuid
import psycopg2
from fastapi.middleware.cors import CORSMiddleware
from passlib.context import CryptContext
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
import jwt
import datetime

# Database Configuration
DATABASE_URL = "postgresql+psycopg2://voucher_admin:securepassword@localhost/voucher_system"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Security Configuration
SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Models
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    role = Column(String, default="user")

class Merchant(Base):
    __tablename__ = "merchants"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, nullable=False)
    vouchers = relationship("Voucher", back_populates="merchant")

class Voucher(Base):
    __tablename__ = "vouchers"
    id = Column(Integer, primary_key=True, index=True)
    code = Column(String, unique=True, index=True, default=lambda: str(uuid.uuid4()))
    type = Column(String, nullable=False)
    value = Column(Integer, nullable=False)
    merchant_id = Column(Integer, ForeignKey("merchants.id"), nullable=False)
    status = Column(String, default="active")
    expiration_date = Column(String, nullable=False)
    merchant = relationship("Merchant", back_populates="vouchers")

class Transaction(Base):
    __tablename__ = "transactions"
    id = Column(Integer, primary_key=True, index=True)
    voucher_id = Column(Integer, ForeignKey("vouchers.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    merchant_id = Column(Integer, ForeignKey("merchants.id"), nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)
    amount = Column(Integer, nullable=False)
    status = Column(String, default="completed")

Base.metadata.create_all(bind=engine)

# FastAPI App
app = FastAPI()

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Reporting - Get All Transactions with Summary
@app.get("/transactions/summary")
def get_transaction_summary(db: Session = Depends(get_db)):
    total_transactions = db.query(func.count(Transaction.id)).scalar()
    total_amount = db.query(func.sum(Transaction.amount)).scalar()
    summary = {
        "total_transactions": total_transactions,
        "total_amount": total_amount if total_amount else 0
    }
    return summary

@app.get("/transactions")
def get_transactions(db: Session = Depends(get_db)):
    transactions = db.query(Transaction).all()
    return transactions

# Protected Endpoint Example
@app.get("/protected")
def protected_route(current_user: User = Depends(get_current_user)):
    return {"message": f"Hello {current_user.username}, you have {current_user.role} access!"}
